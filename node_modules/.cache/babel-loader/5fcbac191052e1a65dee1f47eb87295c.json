{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jinien/Documents/De\\u0301veloppement/Projet 2/P4_ohlbaum_julien/src/components/PlaylistGrid.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport Tracks from './Tracks';\nimport './PlaylistGrid.css';\n\nconst PlaylistGrid = ({\n  token,\n  setCatchid,\n  playlists\n}) => {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  setCatchid(id);\n  const [tracks, setTracks] = useState([]);\n  const [song, setSong] = useState('');\n  const [displayTracks, setDisplayTracks] = useState(false);\n\n  const handleClik = id => {\n    setDisplayTracks(true);\n    axios(`https://api.spotify.com/v1/playlists/${id}/tracks?limit=50`, {\n      method: 'GET',\n      headers: {\n        Authorization: 'Bearer ' + token\n      }\n    }).then(res => {\n      setTracks(res.data.items);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      className: \"category-title\",\n      children: id.replace(/[&]/g, 'n').replace(/[/-_]/g, ' ')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playlist-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"scrollx-section\",\n        children: playlists.map(playlist => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"playlist-item\",\n            onClick: () => handleClik(playlist.id),\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: playlist.images[0].url,\n              alt: \"picture\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 15\n            }, this)\n          }, playlist.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), displayTracks && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"trackAndPlayer-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"track-title\",\n        children: \"Tracks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n        controls: true,\n        autoPlay: false,\n        name: \"media\",\n        src: song,\n        type: \"audio/mpeg\",\n        className: \"player\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), displayTracks && /*#__PURE__*/_jsxDEV(Tracks, {\n      tracks: tracks,\n      setSong: setSong\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PlaylistGrid, \"5R04lrxd7MvAm6dzlILDJv5XpS4=\", false, function () {\n  return [useParams];\n});\n\n_c = PlaylistGrid;\nPlaylistGrid.propTypes = {\n  setCatchid: PropTypes.string.isRequired,\n  token: PropTypes.string.isRequired,\n  playlists: PropTypes.string.isRequired\n};\nexport default PlaylistGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlaylistGrid\");","map":{"version":3,"sources":["/Users/jinien/Documents/Développement/Projet 2/P4_ohlbaum_julien/src/components/PlaylistGrid.jsx"],"names":["useState","useParams","PropTypes","axios","Tracks","PlaylistGrid","token","setCatchid","playlists","id","tracks","setTracks","song","setSong","displayTracks","setDisplayTracks","handleClik","method","headers","Authorization","then","res","data","items","replace","map","playlist","images","url","propTypes","string","isRequired"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\n\nimport Tracks from './Tracks';\n\nimport './PlaylistGrid.css';\n\nconst PlaylistGrid = ({ token, setCatchid, playlists }) => {\n  const { id } = useParams();\n  setCatchid(id);\n  const [tracks, setTracks] = useState([]);\n  const [song, setSong] = useState('');\n  const [displayTracks, setDisplayTracks] = useState(false);\n\n  const handleClik = (id) => {\n    setDisplayTracks(true);\n    axios(`https://api.spotify.com/v1/playlists/${id}/tracks?limit=50`, {\n      method: 'GET',\n      headers: {\n        Authorization: 'Bearer ' + token\n      }\n    }).then((res) => {\n      setTracks(res.data.items);\n    });\n  };\n  return (\n    <div>\n      <h4 className='category-title'>{id.replace(/[&]/g, 'n').replace(/[/-_]/g, ' ')}</h4>\n      <div className='playlist-container'>\n        <div className='scrollx-section'>\n          { playlists.map((playlist) => {\n            return (\n              <div className='playlist-item' key={playlist.id} onClick={() => handleClik(playlist.id)} >\n              <img src={(playlist.images[0].url)} alt=\"picture\"/>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n      {displayTracks &&\n      <div className='trackAndPlayer-container'>\n        <h2 className='track-title'>Tracks</h2>\n        <audio controls autoPlay={false} name=\"media\" src={song} type=\"audio/mpeg\" className='player' />\n      </div>}\n      {displayTracks &&\n        <Tracks tracks={tracks} setSong={setSong}/>}\n    </div>\n  );\n};\n\nPlaylistGrid.propTypes = {\n  setCatchid: PropTypes.string.isRequired,\n  token: PropTypes.string.isRequired,\n  playlists: PropTypes.string.isRequired\n};\n\nexport default PlaylistGrid;\n"]},"metadata":{},"sourceType":"module"}