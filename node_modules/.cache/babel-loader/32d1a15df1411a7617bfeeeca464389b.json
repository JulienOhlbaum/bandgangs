{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jinien/Documents/De\\u0301veloppement/Projet 2/paris-react-0920-pjt-bandgang/src/components/PlaylistGrid.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport './PlaylistGrid.css';\n\nconst PlaylistGrid = ({\n  token,\n  setCatchid,\n  playlists\n}) => {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  setCatchid(id);\n  const [tracks, setTracks] = useState([]);\n  const [song, setSong] = useState('');\n\n  const handleClik = id => {\n    axios(`https://api.spotify.com/v1/playlists/${id}/tracks?limit=10`, {\n      method: 'GET',\n      headers: {\n        Authorization: 'Bearer ' + token\n      }\n    }).then(res => {\n      setTracks(res.data.items);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"playlist-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scrollx-section\",\n      children: playlists.map(playlist => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"playlist-item\",\n          onClick: () => handleClik(playlist.id),\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: playlist.images[0].url,\n            alt: \"picture\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 13\n          }, this)\n        }, playlist.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"track-title\",\n      children: \"Tracks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \" playlist-item\",\n      children: tracks.map((track, i) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          classNames: \"tracks\",\n          onClick: () => setSong(track.track.preview_url),\n          children: track.track.name\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 18\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      controls: true,\n      autoPlay: false,\n      name: \"media\",\n      src: song,\n      type: \"audio/mpeg\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PlaylistGrid, \"rRxEIcmreu0PMZk+Mmg5FWTMpzI=\", false, function () {\n  return [useParams];\n});\n\n_c = PlaylistGrid;\nPlaylistGrid.propTypes = {\n  setCatchid: PropTypes.string.isRequired,\n  token: PropTypes.string.isRequired,\n  playlists: PropTypes.string.isRequired\n};\nexport default PlaylistGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlaylistGrid\");","map":{"version":3,"sources":["/Users/jinien/Documents/Développement/Projet 2/paris-react-0920-pjt-bandgang/src/components/PlaylistGrid.jsx"],"names":["useState","useParams","PropTypes","axios","PlaylistGrid","token","setCatchid","playlists","id","tracks","setTracks","song","setSong","handleClik","method","headers","Authorization","then","res","data","items","map","playlist","images","url","track","i","preview_url","name","propTypes","string","isRequired"],"mappings":";;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,oBAAP;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,UAAT;AAAqBC,EAAAA;AAArB,CAAD,KAAsC;AAAA;;AACzD,QAAM;AAAEC,IAAAA;AAAF,MAASP,SAAS,EAAxB;AACAK,EAAAA,UAAU,CAACE,EAAD,CAAV;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACW,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,EAAD,CAAhC;;AAEA,QAAMa,UAAU,GAAIL,EAAD,IAAQ;AACzBL,IAAAA,KAAK,CAAE,wCAAuCK,EAAG,kBAA5C,EAA+D;AAClEM,MAAAA,MAAM,EAAE,KAD0D;AAElEC,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAE,YAAYX;AADpB;AAFyD,KAA/D,CAAL,CAKGY,IALH,CAKSC,GAAD,IAAS;AACfR,MAAAA,SAAS,CAACQ,GAAG,CAACC,IAAJ,CAASC,KAAV,CAAT;AACD,KAPD;AAQD,GATD;;AAWA,sBACE;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,gBACIb,SAAS,CAACc,GAAV,CAAeC,QAAD,IAAc;AAC5B,4BACE;AAAK,UAAA,SAAS,EAAC,eAAf;AAAiD,UAAA,OAAO,EAAE,MAAMT,UAAU,CAACS,QAAQ,CAACd,EAAV,CAA1E;AAAA,iCACA;AAAK,YAAA,GAAG,EAAGc,QAAQ,CAACC,MAAT,CAAgB,CAAhB,EAAmBC,GAA9B;AAAoC,YAAA,GAAG,EAAC;AAAxC;AAAA;AAAA;AAAA;AAAA;AADA,WAAoCF,QAAQ,CAACd,EAA7C;AAAA;AAAA;AAAA;AAAA,gBADF;AAKD,OANC;AADJ;AAAA;AAAA;AAAA;AAAA,YADF,eAUE;AAAI,MAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVF,eAWE;AAAK,MAAA,SAAS,EAAG,gBAAjB;AAAA,gBACGC,MAAM,CAACY,GAAP,CAAW,CAACI,KAAD,EAAQC,CAAR,KAAc;AACxB,4BAAO;AAAK,UAAA,UAAU,EAAC,QAAhB;AAAgC,UAAA,OAAO,EAAE,MAAMd,OAAO,CAACa,KAAK,CAACA,KAAN,CAAYE,WAAb,CAAtD;AAAA,oBACJF,KAAK,CAACA,KAAN,CAAYG;AADR,WAA6BF,CAA7B;AAAA;AAAA;AAAA;AAAA,gBAAP;AAGD,OAJA;AADH;AAAA;AAAA;AAAA;AAAA,YAXF,eAkBE;AAAO,MAAA,QAAQ,MAAf;AAAgB,MAAA,QAAQ,EAAE,KAA1B;AAAiC,MAAA,IAAI,EAAC,OAAtC;AAA8C,MAAA,GAAG,EAAEf,IAAnD;AAAyD,MAAA,IAAI,EAAC;AAA9D;AAAA;AAAA;AAAA;AAAA,YAlBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD,CAvCD;;GAAMP,Y;UACWH,S;;;KADXG,Y;AAyCNA,YAAY,CAACyB,SAAb,GAAyB;AACvBvB,EAAAA,UAAU,EAAEJ,SAAS,CAAC4B,MAAV,CAAiBC,UADN;AAEvB1B,EAAAA,KAAK,EAAEH,SAAS,CAAC4B,MAAV,CAAiBC,UAFD;AAGvBxB,EAAAA,SAAS,EAAEL,SAAS,CAAC4B,MAAV,CAAiBC;AAHL,CAAzB;AAMA,eAAe3B,YAAf","sourcesContent":["import { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\n\nimport './PlaylistGrid.css';\n\nconst PlaylistGrid = ({ token, setCatchid, playlists }) => {\n  const { id } = useParams();\n  setCatchid(id);\n  const [tracks, setTracks] = useState([]);\n  const [song, setSong] = useState('');\n\n  const handleClik = (id) => {\n    axios(`https://api.spotify.com/v1/playlists/${id}/tracks?limit=10`, {\n      method: 'GET',\n      headers: {\n        Authorization: 'Bearer ' + token\n      }\n    }).then((res) => {\n      setTracks(res.data.items);\n    });\n  };\n\n  return (\n    <div className='playlist-container'>\n      <div className='scrollx-section'>\n        { playlists.map((playlist) => {\n          return (\n            <div className='playlist-item' key={playlist.id} onClick={() => handleClik(playlist.id)}>\n            <img src={(playlist.images[0].url)} alt=\"picture\"/>\n            </div>\n          );\n        })}\n      </div>\n      <h2 className='track-title'>Tracks</h2>\n      <div className = ' playlist-item' >\n        {tracks.map((track, i) => {\n          return <div classNames='tracks'key={i} onClick={() => setSong(track.track.preview_url)} >\n            {track.track.name}\n          </div>;\n        })}\n      </div>\n      <audio controls autoPlay={false} name=\"media\" src={song} type=\"audio/mpeg\" />\n    </div>\n  );\n};\n\nPlaylistGrid.propTypes = {\n  setCatchid: PropTypes.string.isRequired,\n  token: PropTypes.string.isRequired,\n  playlists: PropTypes.string.isRequired\n};\n\nexport default PlaylistGrid;\n"]},"metadata":{},"sourceType":"module"}